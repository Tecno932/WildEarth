using System.Collections.Generic;
using UnityEngine;
using Newtonsoft.Json;

/// <summary>
/// Estructura de texturas del bloque.
/// </summary>
[System.Serializable]
public class BlockTextureInfo
{
    public string[] top;
    public string[] bottom;
    public string[] side;
    public string[] overlay;
    public string all;
}

/// <summary>
/// Estructura completa de datos de un bloque, extendida.
/// </summary>
[System.Serializable]
public class BlockInfo
{
    public string name;
    public string displayName;
    public string material = "Default";   // üîπ Material asignado (ej: "Default", "GrassTint")
    public string category = "Generic";   // üîπ Tipo de bloque: Soil, Rock, Wood, etc.
    public bool solid = true;
    public bool isTransparent = false;
    public bool isFlammable = false;
    public bool isSolid = true;
    public float hardness = 1.0f;         // üîπ Cu√°nto tarda en romperse
    public string tool = "Any";           // üîπ Herramienta ideal
    public string[] drops;                // üîπ Qu√© √≠tems suelta
    public float lightEmission = 0f;      // üîπ Luz emitida (0‚Äì1)
    public BlockTextureInfo textures;
}

/// <summary>
/// Base de datos de todos los bloques cargados desde BlockData.json
/// </summary>
public class BlockDatabase : MonoBehaviour
{
    public static BlockDatabase Instance;
    public Dictionary<string, BlockInfo> blocks;

    private void Awake()
    {
        if (Instance == null) Instance = this;
        else { Destroy(gameObject); return; }

        LoadBlockData();
    }

    private void LoadBlockData()
    {
        TextAsset json = Resources.Load<TextAsset>("BlockData");
        if (json == null)
        {
            Debug.LogError("‚ùå Falta BlockData.json en Resources/");
            return;
        }

        try
        {
            blocks = JsonConvert.DeserializeObject<Dictionary<string, BlockInfo>>(json.text);
            Debug.Log($"‚úÖ Cargados {blocks.Count} bloques desde JSON");
        }
        catch (System.Exception e)
        {
            Debug.LogError("‚ùå Error al leer JSON: " + e.Message);
        }
    }

    public BlockInfo GetBlock(string id)
    {
        if (blocks == null || !blocks.ContainsKey(id))
        {
            Debug.LogWarning($"‚ö† Bloque '{id}' no encontrado");
            return null;
        }
        return blocks[id];
    }

    /// <summary>
    /// Obtiene el material adecuado seg√∫n el tipo definido en el JSON.
    /// </summary>
    public Material GetMaterialForBlock(string blockId)
    {
        if (!blocks.TryGetValue(blockId, out var info))
            return AtlasBuilder.Instance.GetSharedMaterial();

        string matType = info.material?.ToLower() ?? "default";

        // ‚öôÔ∏è Delegamos la elecci√≥n del material al AtlasBuilder (por si en el futuro se ampl√≠a)
        return AtlasBuilder.Instance.GetMaterialForBlock(info.material);
    }
}



///| Campo           | Tipo            | Ejemplo                                | Descripci√≥n                              |
///| :-------------- | :-------------- | :------------------------------------- | :--------------------------------------- |
///| `id`            | `int`           | 2                                      | Identificador num√©rico √∫nico             |
///| `displayName`   | `string`        | `"Grass Block"`                        | Nombre visible en UI                     |
///| `material`      | `string`        | `"GrassTint"`                          | Nombre del material/shader asignado      |
///| `category`      | `string`        | `"Soil"`, `"Rock"`, `"Wood"`           | Clasificaci√≥n general                    |
///| `hardness`      | `float`         | `1.5`                                  | Cu√°nto tarda en romperse                 |
///| `tool`          | `string`        | `"Pickaxe"`, `"Axe"`, `"Shovel"`       | Herramienta √≥ptima para romperlo         |
///| `drops`         | `string[]`      | `["dirt"]`                             | Bloques o √≠tems que suelta al romperse   |
///| `lightEmission` | `float`         | `0.8`                                  | Luz emitida (0‚Äì1)                        |
///| `isTransparent` | `bool`          | `false`                                | Si se renderiza transparente o no        |
///| `isSolid`       | `bool`          | `true`                                 | Si colisiona o no                        |
///| `isFlammable`   | `bool`          | `true`                                 | Si puede prenderse fuego                 |
///| `textures`      | `BlockTextures` | `{ "top": [...], "side": [...], ... }` | Lo que ya ten√©s, mantiene compatibilidad |

///soundType ‚Üí "stone", "wood", "grass" (para sonidos de pisar/romper)
///resistance ‚Üí resistencia a explosiones
///lightOpacity ‚Üí cu√°nta luz bloquea
///renderMode ‚Üí "Opaque", "Cutout", "Transparent"