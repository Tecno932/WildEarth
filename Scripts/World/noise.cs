//| Par√°metro                           | Qu√© hace                                                                                 | Valores recomendados  |
//| ----------------------------------- | ---------------------------------------------------------------------------------------- | --------------------- |
//| **baseScale (0.0015f)**             | Escala general del terreno. M√°s chico = monta√±as grandes, m√°s grande = colinas peque√±as. | 0.001‚Äì0.002           |
//| **octaves (7)**                     | Capas de ruido. M√°s octavas = m√°s detalle.                                               | 6‚Äì8                   |
//| **persistence (0.5)**               | Cu√°nto decae la amplitud entre capas. M√°s bajo = m√°s contraste.                          | 0.4‚Äì0.6               |
//| **lacunarity (2.3)**                | Cu√°nto aumenta la frecuencia entre capas. M√°s alto = m√°s detalle.                        | 2.0‚Äì2.6               |
//| **Mathf.Pow(perlin, 2.2f)**         | Da forma a las monta√±as: m√°s alto = picos puntiagudos.                                   | 1.5‚Äì2.5               |
//| **value * 1.6f - 0.15f**            | Ajusta el rango vertical (relieve total).                                                | multiplicador 1.4‚Äì1.8 |

//| Tipo de terreno                     | baseScale | persistence | lacunarity | pow | comentario       |
//| ----------------------------------- | --------- | ----------- | ---------- | --- | ---------------- |
//| **Llanuras suaves**                 | 0.002     | 0.6         | 2.0        | 1.2 | estilo pradera   |
//| **Colinas y monta√±as suaves**       | 0.0015    | 0.5         | 2.3        | 1.6 | equilibrio       |
//| **Monta√±as puntiagudas tipo Andes** | 0.0012    | 0.45        | 2.5        | 2.2 | relieves fuertes |
//| **Terreno ca√≥tico tipo fantas√≠a**   | 0.001     | 0.4         | 2.8        | 2.4 | relieve extremo  |
using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Generador de ruido determinista coherente en todo el mundo.
/// Usa cache interno y la semilla global definida en WorldSettings.
/// </summary>
public static class Noise
{
    // üß† Cache para evitar recalcular el mismo punto muchas veces (ahorra CPU)
    private static readonly Dictionary<long, float> cache = new();

    /// <summary>
    /// Genera un valor de ruido global (0‚Äì1) basado en Perlin multi-octava.
    /// Controla la forma general del terreno: valles, monta√±as, colinas.
    /// </summary>
    /// <param name="worldX">Coordenada mundial X</param>
    /// <param name="worldZ">Coordenada mundial Z</param>
    /// <param name="octaves">Cantidad de capas de ruido (m√°s = m√°s detalle)</param>
    /// <param name="persistence">Qu√© tan r√°pido disminuye la amplitud entre octavas</param>
    /// <param name="lacunarity">Qu√© tan r√°pido aumenta la frecuencia entre octavas</param>
    /// <returns>Valor normalizado entre 0 y 1</returns>
    public static float GetGlobal(
        float worldX,
        float worldZ,
        int octaves = 6,
        float persistence = 0.5f,
        float lacunarity = 2.3f
    )
    {
        int seed = WorldSettings.Seed;
        Vector2 offset = WorldSettings.Offset;

        // üîí Generar clave √∫nica para cache (mezcla X, Z y seed)
        long key = ((long)Mathf.FloorToInt(worldX) << 32) ^ Mathf.FloorToInt(worldZ) ^ seed;
        if (cache.TryGetValue(key, out float cached))
            return cached;

        // =========================
        // üåÑ Par√°metros del ruido
        // =========================
        float total = 0f;
        float frequency = 1f;   // üîπ Aumenta con cada octava -> m√°s detalle
        float amplitude = 1f;   // üîπ Disminuye con cada octava -> suaviza
        float maxValue = 0f;

        // =========================
        // üåç Escala global del mundo
        // =========================
        // Estos n√∫meros controlan el "tama√±o del planeta":
        // - Baj√° el 0.0015f para monta√±as m√°s anchas y suaves.
        // - Subilo para colinas m√°s cortas y detalladas.
        float baseScale = 0.0015f;

        // Offset global basado en la seed (cambia totalmente el mapa)
        float baseX = (worldX + offset.x + seed * 0.01f);
        float baseZ = (worldZ + offset.y - seed * 0.01f);

        // =========================
        // üîÅ Octavas: ruido fractal
        // =========================
        for (int i = 0; i < octaves; i++)
        {
            float nx = baseX * frequency * baseScale;
            float nz = baseZ * frequency * baseScale;

            float perlin = Mathf.PerlinNoise(nx, nz);

            // üí° Este "pow" cambia la forma del relieve:
            // - Mayor exponente (>1): monta√±as m√°s puntiagudas.
            // - Menor exponente (<1): terreno m√°s plano.
            perlin = Mathf.Pow(perlin, 2.2f);

            total += perlin * amplitude;
            maxValue += amplitude;

            // persistence: controla cu√°nto "peso" tienen las siguientes octavas
            // üîπ menor valor = m√°s contraste entre monta√±as y valles
            amplitude *= persistence;

            // lacunarity: controla cu√°nto se duplica la frecuencia en cada paso
            // üîπ mayor valor = m√°s detalle fractal, monta√±as con texturas
            frequency *= lacunarity;
        }

        // Normalizaci√≥n
        float value = total / maxValue;

        // =========================
        // üßÆ Ajuste final del relieve
        // =========================
        // üîπ Pow(1.1f): define la "pendiente" general (m√°s o menos abrupta)
        // üîπ *1.6f - 0.15f: remapea el rango (m√°s fuerte o m√°s plano)
        value = Mathf.Pow(value, 1.1f);
        value = Mathf.Clamp01(value * 1.6f - 0.15f);

        cache[key] = value;
        return value;
    }

    /// <summary>
    /// Limpia el cache del ruido (por ejemplo al cambiar de seed o mundo)
    /// </summary>
    public static void ClearCache()
    {
        cache.Clear();
    }
}
